#include<stdio.h>
int main()
{
    int n;
    scanf("%d",&n);
    if(n%2==0)
        printf("2 ");
    if(n%3==0)
        printf("3 ");
    if(n%7==0)
        printf("7 ");
    if(n%2&&n%3&&n%7)
        printf("n");
}

#include<stdio.h>
int main()
{
    double n;
    scanf("%lf",&n);
    if(n>=0&&n<100)
        printf("%.1lf",n);
    else if(n>=100&&n<500)
        printf("%.1lf",n*0.9);
    else if(n>=500&&n<2000)
        printf("%.1lf",n*0.8);
    else if(n>=2000&&n<5000)
        printf("%.1lf",n*0.7);
    else
        printf("%.1lf",n*0.6);
    return 0;
}

#include<stdio.h>
int main()
{
    int n;
    scanf("%d",&n);
    int t_w=n;
    double t_v=10+n/10.0;
    if(t_w>t_v)
        putchar('v');
    else
        putchar('w');
    return 0;
}

#include<iostream>
using namespace std;
int main()
{
    int x,y,x1,y1;
    cin>>x>>y>>x1>>y1;
    if(y1-y==1)
        putchar('u');
    else if(y1-y==-1)
        cout<<'d';
    else if(x1-x==1)
        putchar('r');
    else
        putchar('i');
    return 0;
}

#include<iostream>
#include<string>
using  namespace std;
int main()
{
    string str[]={"Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"};
    int n;
    cin>>n;
    cout<<str[n-1];
    return 0;
}

#include<stdio.h>
struct d
{
    char str[10];
}D[7]={"Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","Sunday"};
int main()
{
    int key;
    scanf("%d",&key);
    printf("%s",D[key-1].str);
    return 0;
}

 /**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */
/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 
 * @param head ListNode类 
 * @return ListNode类
 */
struct ListNode* oddEvenList(struct ListNode* head ) {
    // write code here
    if(!head)
        return NULL;
    struct ListNode*oddhead=NULL,*oddtail=NULL,*doublehead=NULL,*doubletail=NULL,*cur=head;
    int count=1;
    while(cur)
    {
        if(count%2==1)
        {
            if(!oddhead)
            {
                oddhead=oddtail=cur;
            }
            else
            {
                oddtail->next=cur;
                oddtail=cur;
            }
        }
        else
        {
            if(!doublehead)
            {
                doublehead=doubletail=cur;
            }
            else
            {
                doubletail->next=cur;
                doubletail=cur;
            }
        }
        cur=cur->next;
        count++;
    }
    oddtail->next=doublehead;
    if(doubletail)
        doubletail->next=NULL;
    return oddhead;
}