#include<stdio.h>
#include<string.h>
#include<stdbool.h>
bool Judge(char*M)
{
	int n = strlen(M);
	for (int i = 0; i < n / 2; i++)
		if (M[i] != M[n - i - 1])
			return false;
	return true;
}
void Reverseadd(int N, char*M,char*M_c)
{
	int n = strlen(M);
	int ret = 0;
	int i = 0;
	for (i = 0; i < n; i++)
	{
		char temp = M[i];
		M[i] = (M[i] + M_c[n - i - 1] + ret-2*'0') % N+'0';
		ret = (temp + M_c[n - i - 1] + ret - 2 * '0') / N;
	}
	while (ret)
	{
		M[i] = ret % N+'0';
		ret /= N;
		i++;
	}
}
int main()
{
	char M[100] = { 0 };
	char M_c[100] = { 0 };
	char N;
	scanf("%d", &N);
	getchar();
	scanf("%s", &M);
	for (int i = 0; i < strlen(M); i++)
	{
		if (M[i] >= 'A')
			M[i] = M[i] - 'A' + 10+'0';//转化为以’0‘为基准的字符
	}
	int STEP = 0;
	while (STEP++ <= 30)
	{
		strcpy(M_c, M);
		Reverseadd(N, M,M_c);
		if (Judge(M))
		{
			printf("STEP=%d", STEP);
			return 0;
		}
	}
	printf("Impossible!");
}

/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 * 计算两个数之和
 * @param s string字符串 表示第一个整数
 * @param t string字符串 表示第二个整数
 * @return string字符串
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */
char* solve(char* s, char* t ) {
    // write code here
    int lens=strlen(s);
    int lent=strlen(t);
    int lenmax,lenmin,flag;
    if(lens<lent)
    {
        lenmax=lent;
        lenmin=lens;
        flag=0;
    }
    else
    {
        lenmax=lens;
        lenmin=lent;
        flag=1;
    }
    char*p=(char*)calloc(lenmax+2,sizeof(char));
    int ret=0;
    for(int i=0;i<lenmin;i++)
    {
        if(flag)
        {
            int temp=t[lenmin-i-1]+s[lenmax-i-1]-2*'0'+ret;
            p[lenmax-i]=temp%10+'0';
            ret=temp/10;
        }
        else
        {
            int temp=s[lenmin-i-1]+t[lenmax-i-1]-2*'0'+ret;
            p[lenmax-i]=temp%10+'0';
            ret=temp/10;
        }
    }
    for(int i=lenmin;i<lenmax;i++)
    {
        if(flag)
        {
            int temp=s[lenmax-i-1]-'0'+ret;
            p[lenmax-i]=temp%10+'0';
            ret=temp/10;
        }
        else
        {
            int temp=t[lenmax-i-1]-'0'+ret;
            p[lenmax-i]=temp%10+'0';
            ret=temp/10;
        }
    }
    if(!ret)
        return p+1 ;
    else
    {
        p[0]=ret+'0';
        return p;
    }
}