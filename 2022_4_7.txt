/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */

/**
 * 
 * @param head ListNode类 the head
 * @return bool布尔型
 */
#include<stdbool.h>
bool isPail(struct ListNode* head ) {
    // write code here
    struct ListNode*fast,*slow,*cur,*node,*phead,*prev;
    fast=slow=prev=head;
    while(fast->next->next&&fast->next)
    {
        prev=slow;
        fast=fast->next->next;
        slow=slow->next;
    }
    slow=slow->next;
    prev->next=NULL;
    cur=slow;
    while(cur)
    {
        node=cur;
        cur=cur->next;
        node->next=phead;
        phead=node;
    }
    while(head&&phead)
    {
        if(head->val!=phead->val)
            return false;
        head=head->next;
        phead=phead->next;
    }
    return true;
}

/**
 * struct ListNode {
 *	int val;
 *	struct ListNode *next;
 * };
 *
 * C语言声明定义全局变量请加上static，防止重复定义
 */
/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 * 
 * @param head ListNode类 
 * @param m int整型 
 * @param n int整型 
 * @return ListNode类
 */
struct ListNode*reserves(struct ListNode* p,int n)
{
    if(!p)
        return NULL;
    struct ListNode*node=NULL,*phead=NULL;
     while(n--)
    {
        node=p;
        p=p->next;
        node->next=phead;
        phead=node;
    }
    return phead;
}
struct ListNode* reverseBetween(struct ListNode* head, int m, int n ) {
    // write code here
    struct ListNode*p1=head,*p2=head,*prev=head,*phead=NULL,*cur;
    p1=p1=prev=head;
    int d=n-m+1;
    while(--m)
    {
        prev=p1;
        p1=p1->next;
    }
    cur=p1;
    while(n--)
    {
        p2=p2->next;
    }
    phead=reserves(cur,d);
    if(p2)
        p1->next=p2;
    if(prev==p1)
        return phead;
    else
        prev->next=phead;
    return head;
}